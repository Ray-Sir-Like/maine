# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'
VAGRANTFILE_API_VERSION = '2'

config_file=File.expand_path(File.join(File.dirname(__FILE__), 'vagrant_variables.yml'))
settings=YAML.load_file(config_file)

LABEL_PREFIX    = settings['label_prefix'] ? settings['label_prefix'] + "-" : ""
NSEED           = settings['seed']
NCI             = settings['ci']
NCONTROLS       = settings['control_vms']
NCOMPUTES       = settings['compute_vms']
NSTORAGES       = settings['storage_vms']
BOX             = settings['vagrant_box']
CLIENT_BOX      = settings['client_vagrant_box'] || settings['vagrant_box']
BOX_URL         = settings['vagrant_box_url']
SYNC_DIR        = settings['vagrant_sync_dir']
CPUS            = settings['cpus']
MEMORY          = settings['memory']
USER            = settings['ssh_username']
CTL_NEED_DISK   = settings['ctl_need_disk']
OS_RELEASE      = settings['os_release']

PROVISION_SEED_SCRIPT = settings.fetch('provision_seed_script','bootstrap_seed.sh')
PROVISION_NODES_SCRIPT = settings.fetch('provision_nodes_script','bootstrap_nodes.sh')

SEED_CPUS = settings.fetch('seed_cpus', CPUS/2)
CI_CPUS = settings.fetch('ci_cpus', CPUS/2)
CONTROL_CPUS = settings.fetch('control_cpus', CPUS)
COMPUTE_CPUS = settings.fetch('compute_cpus', CPUS)
STORAGE_CPUS = settings.fetch('storage_cpus', CPUS)

SEED_MEMORY = settings.fetch('seed_memory', MEMORY/2) * 1024
CI_MEMORY = settings.fetch('ci_memory', MEMORY/2) * 1024
CONTROL_MEMORY = settings.fetch('control_memory', MEMORY) * 1024
COMPUTE_MEMORY = settings.fetch('compute_memory', MEMORY) * 1024
STORAGE_MEMORY = settings.fetch('storage_memory', MEMORY) * 1024

vagrant_dir = File.expand_path(File.dirname(__FILE__))
# Configure a new SSH key and config so the operator is able to connect with
# the other cluster nodes.
unless File.file?(File.join(vagrant_dir, 'vagrantkey'))
  system("ssh-keygen -f #{File.join(vagrant_dir, 'vagrantkey')} -N '' -C this-is-vagrant")
end
my_privatekey = File.read(File.join(vagrant_dir, "vagrantkey"))
my_publickey = File.read(File.join(vagrant_dir, "vagrantkey.pub"))

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vagrant.plugins = ["vagrant-hostmanager", "vagrant-libvirt"]
  config.vm.box = BOX
  config.vm.box_url = BOX_URL
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.ssh.insert_key = false # workaround for https://github.com/mitchellh/vagrant/issues/5048
  config.ssh.private_key_path = settings['ssh_private_key_path']
  config.ssh.username = USER
  config.hostmanager.enabled = false
  config.hostmanager.manage_guest = true
  config.hostmanager.manage_host = true
  config.hostmanager.include_offline = true
  config.hostmanager.ip_resolver = proc do |vm|
    vm.guest.capability(:read_ip_address)
  end

  config.vm.provision :shell, inline: <<-EOS
    mkdir -p /root/.ssh
    echo '#{my_privatekey}' > /root/.ssh/id_rsa
    chmod 600 /root/.ssh/id_rsa
    echo '#{my_publickey}' > /root/.ssh/authorized_keys
    chmod 600 /root/.ssh/authorized_keys
    echo StrictHostKeyChecking no >> /root/.ssh/config
    sudo nmcli c delete "Wired connection 1" || true
    sudo nmcli c delete "System eth1" || true
    sudo nmcli c delete "ens3" || true
  EOS
  config.vm.provision :shell, inline: <<-EOS
    pushd /etc/yum.repos.d/
    rm -rf *.repo
    curl --retry 5 -O "http://repo.ustack.com/repofiles/repo-os/ustack#{OS_RELEASE}-production.repo"
    popd
    # remove hostname 127.0.1.1
    sed -i '/127.0.1.1/d' /etc/hosts
    # disable swap
    sed -i "s#/dev/mapper/VolGroup00-LogVol01.*##g" /etc/fstab
    swapoff -a
    # resize root part
    if [ -f /etc/openEuler-release ]; then
      ARCH=$(uname -m)
      if [ "x$ARCH" == 'xaarch64' ]; then
          dnf install -y cloud-utils-growpart
          growpart /dev/vda 3
      else
          cat <<EOF | sudo parted ---pretend-input-tty /dev/vda
resizepart 2
yes
100%
EOF
      fi
    else
      cat <<EOF | sudo parted ---pretend-input-tty /dev/vda
resizepart 1
yes
100%
EOF
    fi
  EOS


  # When using libvirt, avoid errors like:
  # "host doesn't support requested feature: CPUID.01H:EDX.ds [bit 21]"
  config.vm.provider :libvirt do |lv|
    lv.cpu_mode = 'host-passthrough'
    lv.disk_driver :cache => 'writeback'
    lv.graphics_type = 'none'
    lv.machine_virtual_size = settings['root_disk_size']
  end

  # NOTE(Xing Zhang): Add aarch64 config
  if RbConfig::CONFIG["arch"].include? "aarch64"
    config.vm.provider :libvirt do |lv|
      lv.machine_type = 'virt'
      lv.input :type => "mouse", :bus => "usb"
      lv.input :type => "keyboard", :bus => "usb"
      lv.usb_controller :model => "qemu-xhci"
      lv.video_type = "vga"
      lv.loader = "/usr/share/AAVMF/AAVMF_CODE.fd"
      lv.nvram = ""
    end
  end

  if BOX == 'openstack'
    # OpenStack VMs
    config.vm.provider :openstack do |os|
      config.ssh.pty = true
      os.openstack_auth_url = settings['os_openstack_auth_url']
      os.username = settings['os_username']
      os.password = settings['os_password']
      os.tenant_name = settings['os_tenant_name']
      os.region = settings['os_region']
      os.flavor = settings['os_flavor']
      os.image = settings['os_image']
      os.keypair_name = settings['os_keypair_name']
      os.security_groups = ['default']

      if settings['os.networks'] then
        os.networks = settings['os_networks']
      end

      if settings['os.floating_ip_pool'] then
        os.floating_ip_pool = settings['os_floating_ip_pool']
      end

      config.vm.provision "shell", inline: "true", upload_path: "/home/#{USER}/vagrant-shell"
    end
  end

  if NSEED > 0 then
    config.vm.define "#{LABEL_PREFIX}seed" do |seed|
      seed.vm.provision :shell, path: PROVISION_SEED_SCRIPT
      seed.vm.provision :hostmanager
      seed.vm.hostname = "#{LABEL_PREFIX}seed"
      seed.vm.network :private_network, ip: "10.0.6.90"
      # Libvirt
      seed.vm.provider :libvirt do |lv|
        lv.cpus = SEED_CPUS
        lv.memory = SEED_MEMORY / 2
        lv.random_hostname = true
      end
    end
  end

  if NCI > 0 then
    config.vm.define "#{LABEL_PREFIX}ci" do |ci|
      ci.vm.provision :shell, path: PROVISION_NODES_SCRIPT
      ci.vm.hostname = "#{LABEL_PREFIX}ci"
      ci.vm.network :private_network, ip: "10.0.6.29"
      # Libvirt
      ci.vm.provider :libvirt do |lv|
        lv.cpus = CI_CPUS
        lv.memory = CI_MEMORY
        lv.random_hostname = true
      end
    end
  end

  (1..NCONTROLS).each do |i|
    config.vm.define "#{LABEL_PREFIX}control#{i}" do |control|
      control.vm.provision :shell, path: PROVISION_NODES_SCRIPT
      control.vm.hostname = "#{LABEL_PREFIX}control#{i}"
      control.vm.network :private_network, ip: "10.0.6.3#{i}"

      # Libvirt
      driverletters = ('a'..'z').to_a
      control.vm.provider :libvirt do |lv|
        if CTL_NEED_DISK
          (0..2).each do |d|
            lv.storage :file, :device => "hd#{driverletters[d]}", :size => settings['storage_disk_size'], :bus => "sata"
          end
        end
        lv.cpus = CONTROL_CPUS
        lv.memory = CONTROL_MEMORY
        lv.random_hostname = true
      end
    end
  end

  (1..NCOMPUTES).each do |i|
    config.vm.define "#{LABEL_PREFIX}compute#{i}" do |compute|
      compute.vm.provision :shell, path: PROVISION_NODES_SCRIPT
      compute.vm.hostname = "#{LABEL_PREFIX}compute#{i}"
      compute.vm.network :private_network, ip: "10.0.6.4#{i}"

      # Libvirt
      driverletters = ('a'..'z').to_a
      compute.vm.provider :libvirt do |lv|
        # always make /dev/sd{a/b/c} so that CI can ensure that
        # virtualbox and libvirt will have the same devices to use for OSDs
        (0..2).each do |d|
          lv.storage :file, :device => "hd#{driverletters[d]}", :size => settings['storage_disk_size'], :bus => "sata"
        end
        lv.cpus = COMPUTE_CPUS
        lv.memory = COMPUTE_MEMORY
        lv.random_hostname = true
      end
    end
  end


  (1..NSTORAGES).each do |i|
    config.vm.define "#{LABEL_PREFIX}storage#{i}" do |storage|
      storage.vm.provision :shell, path: PROVISION_NODES_SCRIPT
      storage.vm.hostname = "#{LABEL_PREFIX}storage#{i}"
      storage.vm.network :private_network, ip: "10.0.6.5#{i}"

      # Libvirt
      driverletters = ('a'..'z').to_a
      storage.vm.provider :libvirt do |lv|
        # always make /dev/sd{a/b/c} so that CI can ensure that
        # virtualbox and libvirt will have the same devices to use for OSDs
        (0..2).each do |d|
          lv.storage :file, :device => "hd#{driverletters[d]}", :size => settings['storage_disk_size'], :bus => "sata"
        end
        lv.cpus = STORAGE_CPUS
        lv.memory = STORAGE_MEMORY
        lv.random_hostname = true
      end
    end
  end
end
