# Copyright 2010 United States Government as represented by the
# Administrator of the National Aeronautics and Space Administration.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License"); you may
#    not use this file except in compliance with the License. You may obtain
#    a copy of the License at
#
#         http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#    WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#    License for the specific language governing permissions and limitations
#    under the License.


def main():
    import argparse
    import datetime
    import elasticsearch
    import requests
    import six
    import sys

    from oslo_utils import timeutils

    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--ttl', '-tl', type=int, default=-1,
                        help="Number of seconds that data records are "
                             "kept in the database for (<= 0 means forever).")
    parser.add_argument('--type', '-tp', default='',
                        help='only support panko, cloudkitty now.')
    parser.add_argument('--host', '-u', default='http://127.0.0.1:9200',
                        help='elasitcsearch host')
    parser.add_argument('--index', '-i', default='',
                        help='index name')
    parser.add_argument('--verify', '-v', default=True,
                        help='SSL cert verification')
    parser.add_argument('args',
                        nargs=argparse.REMAINDER,
                        metavar='-- [passed options]',
                        help="'--' is the separator of the arguments used "
                        "to start the WSGI server and the arguments passed "
                        "to the WSGI application.")
    args = parser.parse_args()
    if args.args:
        if args.args[0] == '--':
            args.args.pop(0)
        else:
            parser.error("unrecognized arguments: %s" % ' '.join(args.args))
    sys.argv[1:] = args.args

    if args.type not in ('panko', 'cloudkitty', 'fluentd') \
            or not args.index or args.ttl < 0:
        print("expire data with invalid args")
        sys.exit(0)

    print("*" * 80)
    print("processing expire data for %s ......" % args.type)

    index_name = args.index
    host = args.host
    conn = elasticsearch.Elasticsearch(hosts=host)
    end = timeutils.utcnow() - datetime.timedelta(seconds=args.ttl)
    end = end.isoformat()
    if args.type == 'panko' or args.type == 'fluentd':
        delete_query = {
            "query": {"bool": {"must": [{"range": {
                "timestamp": {"lte": end}}}]}}}
    elif args.type == 'cloudkitty':
        delete_query = {
            "query": {"bool": {"must": [{"range": {
                "end": {"lte": end}}}]}}}
    try:
        conn.delete_by_query(index=index_name, body=delete_query)
        url = "/".join((host, index_name,
                        "_forcemerge?only_expunge_deletes=true"))
        requests.post(url, verify=args.verify)
    except Exception as e:
        if '404' in six.text_type(e):
            print("index does not exist, skip purge data")
            exit(0)
        else:
            raise e

    print("expire data success for %s" % args.type)
    print("*" * 80)
    sys.stdout.flush()

if __name__ == '__main__':
    main()
